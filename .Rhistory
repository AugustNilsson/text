force_train_method = "automatic",
mtry = c(1),
min_n = c(1),
preprocess_PCA = c(0.95),
trees = c(1000),
eval_measure = "accuracy"
)
testthat::expect_that(results_rf, testthat::is_a("list"))
testthat::expect_is(results_rf$results$p_value[1], "character")
results_rf <- textTrain(x,
y,
#force_train_method = "random_forest",
mtry = c(1),
min_n = c(1),
preprocess_PCA = c(0.95),
trees = c(1000),
eval_measure = "accuracy")
testthat::expect_that(results_rf, testthat::is_a("list"))
testthat::expect_is(results_rf$results$p_value[1], "character")
help("textTrainRandomForest")
results_rf <- textTrain(x,
y,
#force_train_method = "random_forest",
mtry = c(1),
min_n = c(1),
preprocess_PCA = c(0.95),
trees = c(1000),
eval_measure = "precision")
testthat::expect_that(results_rf, testthat::is_a("list"))
testthat::expect_is(results_rf$results$p_value[1], "character")
devtools::document()
devtools::document()
packageStartupMessage(colourise(
"This is text (version 0.8.82). \n",  fg = "green", bg = NULL), colourise("Newer versions may have updated default settings to reflect current understandings of the state-of-the-art."
,  fg = "blue", bg = NULL)
)
devtools::document()
library(text)
text_train_results <- textTrain(x= harmony_word_embeddings$harmonywords,
y=Language_based_assessment_data_8$hilstotal,
preprocess_PCA = c(0.20),
penalty = 1e-16)
trained_min_halving <- textTrain(wordembeddings4$harmonytext,
Language_based_assessment_data_8$hilstotal,
#outside_strata_y = NULL,
#inside_strata_y = NULL,
penalty = c(1),
mixture = c(0),
preprocess_PCA = "min_halving",
multi_cores = TRUE,
save_output = "only_results"
)
devtools::document()
library(text)
trained_1 <- textTrain(wordembeddings4$harmonytext,
Language_based_assessment_data_8$hilstotal,
#outside_strata_y = NULL,
#inside_strata_y = NULL,
penalty = c(1),
mixture = c(0),
preprocess_PCA = c(1), #, 3
multi_cores = FALSE,
save_output == "only_results_predictions"
)
trained_1 <- textTrain(wordembeddings4$harmonytext,
Language_based_assessment_data_8$hilstotal,
#outside_strata_y = NULL,
#inside_strata_y = NULL,
penalty = c(1),
mixture = c(0),
preprocess_PCA = c(1), #, 3
multi_cores = FALSE,
save_output = "only_results_predictions"
)
library(text)
devtools::document()
trained_min_halving <- textTrain(wordembeddings4$harmonytext,
Language_based_assessment_data_8$hilstotal,
#outside_strata_y = NULL,
#inside_strata_y = NULL,
penalty = c(1),
mixture = c(0),
preprocess_PCA = "min_halving",
multi_cores = TRUE,
save_output = "only_results"
)
#warnings()
testthat::expect_that(trained_min_halving, is_a("list"))
trained_min_halving
trained_min_halving$correlation[1]
testthat::expect_is(trained_min_halving$correlation[1], "numeric")
testthat::expect_is(trained_min_halving$correlation[1], "character")
trained_min_halving$correlation[1]
testthat::expect_is(trained_min_halving$correlation$statistic[1], "character")
trained_min_halving$correlation$statistic[1]
testthat::expect_is(trained_min_halving$correlation$statistic[[1]], "character")
trained_min_halving$correlation$statistic[[1]]
testthat::expect_is(trained_min_halving$correlation$statistic[[1]], "numeric")
trained <- textTrainRandomForest(wordembeddings4$harmonytext,
example_categories,
#outside_strata_y = NULL,
#inside_strata_y = NULL,
mode_rf = "classification",
mtry = c(1),
min_n = c(1),
trees = c(1000),
preprocess_PCA = c(0.95),
extremely_randomised_splitrule = NULL,
multi_cores = TRUE,
eval_measure = "roc_auc", #sens bal_accuracy f_measure
save_output = "only_results"
)
example_categories <- as.factor(c(1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2))
trained <- textTrainRandomForest(wordembeddings4$harmonytext,
example_categories,
#outside_strata_y = NULL,
#inside_strata_y = NULL,
mode_rf = "classification",
mtry = c(1),
min_n = c(1),
trees = c(1000),
preprocess_PCA = c(0.95),
extremely_randomised_splitrule = NULL,
multi_cores = TRUE,
eval_measure = "roc_auc", #sens bal_accuracy f_measure
save_output = "only_results"
)
testthat::expect_that(trained, testthat::is_a("list"))
testthat::expect_is(trained$truth_predictions$truth[1], "factor")
trained
testthat::expect_is(trained$results$.estimate[1], "numeric")
trained$results$.estimate[1]
library(tidyverse)
old_wd <- getwd()
old_wd
setwd("/Users/oscarkjell/Desktop/1 Projects/0 Research/15 Response Formats/1 Data/")
ds1 <- read_csv("response_format_cleaned_ds1.csv")
colnames(ds1)
ds2a <- ds1[, c("dep_all_words", "wor_all_words",
"dep_all_phraces", "wor_all_phraces",
"dep_text", "wor_text",
"dep_all_selected1", "wor_all_selected1",
"PHQtot", "GADtot", "CESDtot", "PSWQtot",
"minidep_diagnose", "miniGAD_diagnose",
"minidiagnose_category")]
ds2 <- ds2a[complete.cases(ds2a),]
nrow(ds2)
ds2_text <- ds2[,c("dep_all_words", "wor_all_words",
"dep_all_phraces", "wor_all_phraces",
"dep_text", "wor_text",
"dep_all_selected1", "wor_all_selected1")]
ds2_text
rating_scales <- ds2[,c("PHQtot", "GADtot", "CESDtot", "PSWQtot")]
diagnoses <- ds2[,c("minidep_diagnose", "miniGAD_diagnose",
"minidiagnose_category")]
# Correlating rating scales
#Function to correlate many items and creat "significance-stars"; note that you can change in TWO places in the function for spearman eller pearson etc
library(Hmisc)
corstarsl <- function(x){
require(Hmisc)
x <- as.matrix(x)
R <- rcorr(x, type="pearson")$r
p <- rcorr(x, type="pearson")$P
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle (Original)
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- NA
Rnew <- as.data.frame(Rnew)
## remove last column and return the matrix (which is now a data frame)
Rnew <- cbind(Rnew[1:length(Rnew)-1])
return(Rnew)
}
corstarsl(rating_scales)
# What a clinician using 10 on PHQ9 as cut of would get:
ds2 <- ds2 %>%
mutate(phq_tot_diagnose10 = cut(PHQtot, breaks=c(-Inf, 10, Inf), labels=c("0","1")))
chisq.test(ds2$minidep_diagnose, ds2$phq_tot_diagnose10) # 9=269.13; 10 = 283.92; 11 = 275.94; 12 = 292.72; 13 = 320.15; 14=293
evaluative_measures_PHQ10_cutoff <- caret::confusionMatrix(as.factor(ds2$minidep_diagnose), ds2$phq_tot_diagnose10)
evaluative_measures_PHQ10_cutoff
cor.test(as.numeric(ds2$minidep_diagnose), as.numeric(ds2$phq_tot_diagnose10))
# What a clinician using 10 on GAD as cut of would get:
ds2 <- ds2 %>%
mutate(gad_tot_diagnose10 = cut(GADtot, breaks=c(-Inf, 10, Inf), labels=c("0","1")))
chisq.test(as.factor(ds2$miniGAD_diagnose), ds2$gad_tot_diagnose10) #
evaluative_measures_GAD10_cutoff <- caret::confusionMatrix(as.factor(ds2$miniGAD_diagnose), ds2$gad_tot_diagnose10)
evaluative_measures_GAD10_cutoff
cor.test(as.numeric(ds2$miniGAD_diagnose), as.numeric(ds2$gad_tot_diagnose10))
library(text)
#15.23
T1_we <- Sys.time()
#ds2_we <- textEmbed(ds2_text)
T2_we <- Sys.time()
T2_we-T1_we
#write_rds(ds2_we, "ds2_word_embeddings.rds")
ds2_we <- read_rds("ds2_word_embeddings.rds")
# dep words
rating_scales_dep <- rating_scales[,c(1, 3)]
wordembeddings_dep <- ds2_we[c(1, 3, 5, 7)]
rating_scales_dep1 <- rating_scales_dep[1:20,]
rating_scales_dep1
wordembeddings_dep1 <- sapply(wordembeddings_dep, "[[", 20)
wordembeddings_dep1
wordembeddings_dep1 <- sapply(wordembeddings_dep, "[", 20)
wordembeddings_dep1
rating_scales_dep
rating_scales_dep1
wordembeddings4
wordembeddings4_4 <- wordembeddings4[1:4]
wordembeddings4_4
Language_based_assessment_data_8_2 <- Language_based_assessment_data_8[,5:6]
Language_based_assessment_data_8_2
dep_all_dep_ratings_1_9 <- textTrain(wordembeddings4_4,
Language_based_assessment_data_8_2,
preprocess_PCA = c(0.1),
penalty = 1,
method_cor = "spearman",
save_output = "only_results")
dep_all_dep_ratings_1_9
wordembeddings_dep
x <- wordembeddings4_4
y <- Language_based_assessment_data_8_2
force_train_method = "automatic"
if (is.numeric(y) == TRUE & force_train_method == "automatic") {
train_method = "regression"
} else if (force_train_method == "regression"){
train_method = "regression"
} else if (is.factor(y) == TRUE & force_train_method =="automatic"){
train_method = "random_forest"
} else if (force_train_method == "random_forest"){
train_method = "random_forest"
} else if ((tibble::is_tibble(y)|is.data.frame(y) & length(y) > 1) & force_train_method =="automatic"){
# Create a dataframe only depending numeric or categorical depending on most frequent type
# Select all numeric variables
y_n <- dplyr::select_if(y, is.numeric)
# Select all categorical variables
y_f <- dplyr::select_if(y, is.factor)
# Select most frequent type as y
if(length(y_n) >= length(y_f)){
y <- y_n
train_method = "regression"
}else if(length(y_n)<length(y_f)){
y <- y_f
train_method = "random_forest"
}
} else if ((tibble::is_tibble(y)|is.data.frame(y) & length(y) > 1) & force_train_method =="regression"){
y <- dplyr::select_if(y, is.numeric)
train_method = "regression"
} else if ((tibble::is_tibble(y)|is.data.frame(y) & length(y) > 1) & force_train_method =="random_forest"){
y <- dplyr::select_if(y, is.factor)
train_method = "random_forest"
}
train_method
y
(!tibble::is_tibble(x) & length(x)>1) | ((tibble::is_tibble(y)|is.data.frame(y)) & length(y)>1)
force_train_method = "regression"
# Force or decide regression or random forest (and select only categorical or numeric variables for multiple input).
if (is.numeric(y) == TRUE & force_train_method == "automatic") {
train_method = "regression"
} else if (force_train_method == "regression"){
train_method = "regression"
} else if (is.factor(y) == TRUE & force_train_method =="automatic"){
train_method = "random_forest"
} else if (force_train_method == "random_forest"){
train_method = "random_forest"
} else if ((tibble::is_tibble(y)|is.data.frame(y) & length(y) > 1) & force_train_method =="automatic"){
# Create a dataframe only depending numeric or categorical depending on most frequent type
# Select all numeric variables
y_n <- dplyr::select_if(y, is.numeric)
# Select all categorical variables
y_f <- dplyr::select_if(y, is.factor)
# Select most frequent type as y
if(length(y_n)>length(y_f)){
y <- y_n
train_method = "regression"
}else if(length(y_n)<length(y_f)){
y <- y_f
train_method = "random_forest"
}
} else if ((tibble::is_tibble(y)|is.data.frame(y) & length(y) > 1) & force_train_method =="regression"){
y <- dplyr::select_if(y, is.numeric)
train_method = "regression"
} else if ((tibble::is_tibble(y)|is.data.frame(y) & length(y) > 1) & force_train_method =="random_forest"){
y <- dplyr::select_if(y, is.factor)
train_method = "random_forest"
}
train_method
y
# Get variable names in the list of outcomes.
variables <- names(y)
variables
# Duplicate variable names to as many different word embeddings there are in x.
variables <- rep(variables, length(x))
variables
# Create data frame with duplicated variables.
y1 <- y[c(variables)]
y1
# Order columns alphabetically.
y1 <- y1[, order(colnames(y1))]
# Creating descriptions of which variables are used in training, which is  added to the output.
descriptions <- paste(rep(names(x), length(y)), "_", names(y1), sep = "")
descriptions
force_train_method
output <- mapply(textTrainRegression, x, y1, SIMPLIFY = FALSE)
output
output_t <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[1]][c(1)])))
output_df <-t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[2]][c(1)])))
output_p <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[3]][c(1)])))
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[4]][c(1)])))
output_a <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[6]][c(1)])))
# Add Outcomes and Descriptions together; name the columns; and remove the row names.
output_ordered_named <- data.frame(cbind(descriptions, output_r, output_df, output_p, output_t, output_a))
colnames(output_ordered_named) <- c("descriptions", "correlation", "df", "p_value", "t_statistics", "alternative")
rownames(output_ordered_named) <- NULL
output_predscore <- as.data.frame(lapply(output, function(output) unlist(output$predictions)))
output_predscore_reg <- output_predscore[grep("predictions", rownames(output_predscore)), ]
colnames(output_predscore_reg) <- c(paste(descriptions, "_pred", sep = ""))
names(output) <- descriptions
#Remove predictions from output since they are saved together
output1 <- purrr::map(output, ~purrr::discard(.x, names(.x) == 'predictions'))
results <- list(output1, output_predscore_reg, output_ordered_named) #
names(results) <- c("all_output", "predictions", "results") #
results
# Using mapply to loop over the word embeddings and the outcome variables. help(mapply)
output <- mapply(textTrainRegression, x, y1, SIMPLIFY = FALSE, save_output = "only_results", ...)
output <- mapply(textTrainRegression, x, y1, SIMPLIFY = FALSE, save_output = "only_results")
output
warnings()
output_t <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[1]][c(1)])))
output_df <-t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[2]][c(1)])))
output_p <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[3]][c(1)])))
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[4]][c(1)])))
output_a <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[6]][c(1)])))
# Add Outcomes and Descriptions together; name the columns; and remove the row names.
output_ordered_named <- data.frame(cbind(descriptions, output_r, output_df, output_p, output_t, output_a))
colnames(output_ordered_named) <- c("descriptions", "correlation", "df", "p_value", "t_statistics", "alternative")
rownames(output_ordered_named) <- NULL
output_predscore <- as.data.frame(lapply(output, function(output) unlist(output$predictions)))
output_predscore_reg <- output_predscore[grep("predictions", rownames(output_predscore)), ]
colnames(output_predscore_reg) <- c(paste(descriptions, "_pred", sep = ""))
output_predscore
if(save_output == "all" | save_output == "only_results_predictions"){
output_predscore <- as.data.frame(lapply(output, function(output) unlist(output$predictions)))
output_predscore_reg <- output_predscore[grep("predictions", rownames(output_predscore)), ]
colnames(output_predscore_reg) <- c(paste(descriptions, "_pred", sep = ""))
}
save_output = "only_results"
if(save_output == "all" | save_output == "only_results_predictions"){
output_predscore <- as.data.frame(lapply(output, function(output) unlist(output$predictions)))
output_predscore_reg <- output_predscore[grep("predictions", rownames(output_predscore)), ]
colnames(output_predscore_reg) <- c(paste(descriptions, "_pred", sep = ""))
}
names(output) <- descriptions
#Remove predictions from output since they are saved together
output1 <- purrr::map(output, ~purrr::discard(.x, names(.x) == 'predictions'))
results <- list(output1, output_predscore_reg, output_ordered_named) #
names(results) <- c("all_output", "predictions", "results") #
results
library(text)
x <- wordembeddings4_4
y <- Language_based_assessment_data_8_2
x
y
wordembeddings4_4
dep_all_dep_ratings_1_9 <- textTrain(wordembeddings4_4,
Language_based_assessment_data_8_2,
preprocess_PCA = c(0.1),
penalty = 1,
method_cor = "spearman",
save_output = "only_results")
dep_all_dep_ratings_1_9
dep_all_dep_ratings_1_9
output$correlation
output
# Using mapply to loop over the word embeddings and the outcome variables. help(mapply)
output <- mapply(textTrainRegression, x, y1, SIMPLIFY = FALSE, cor_method = "spearman", ...)
output <- mapply(textTrainRegression, x, y1, SIMPLIFY = FALSE, cor_method = "spearman")
output <- mapply(textTrainRegression, x, y1, SIMPLIFY = FALSE, method_cor = "spearman")
output
output_t <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[1]][c(1)])))
output_t
output_df <-t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[2]][c(1)])))
output_df
#output_df <-t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[2]][c(1)])))
output_p <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[3]][c(1)])))
output_p
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[4]][c(1)])))
output_r
output_a <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[6]][c(1)])))
output_a
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[5]][c(1)])))
output_r
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[7]][c(1)])))
output_r
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[8]][c(1)])))
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[3]][c(2)])))
output_p
# Add Outcomes and Descriptions together; name the columns; and remove the row names.
output_ordered_named <- data.frame(cbind(descriptions, output_r, output_p, output_S, output_a))
output_S <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[1]][c(1)])))
output_p <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[3]][c(1)])))
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[3]][c(2)])))
output_a <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[5]][c(1)])))
# Add Outcomes and Descriptions together; name the columns; and remove the row names.
output_ordered_named <- data.frame(cbind(descriptions, output_r, output_p, output_S, output_a))
colnames(output_ordered_named) <- c("descriptions", "rho_correlation", "p_value", "S_statistics", "alternative")
rownames(output_ordered_named) <- NULL
output_ordered_named
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[3]][c(2)])))
output_r
output
output_p
output_p <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[2]][c(1)])))
output_p
output_S <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[1]][c(1)])))
output_p <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[2]][c(1)])))
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[3]][c(1)])))
output_a <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[5]][c(1)])))
# Add Outcomes and Descriptions together; name the columns; and remove the row names.
output_ordered_named <- data.frame(cbind(descriptions, output_r, output_p, output_S, output_a))
colnames(output_ordered_named) <- c("descriptions", "rho_correlation", "p_value", "S_statistics", "alternative")
rownames(output_ordered_named) <- NULL
output_ordered_named
output <- mapply(textTrainRegression, x, y1, SIMPLIFY = FALSE, method_cor = "kendall")
output
output_S <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[1]][c(1)])))
output_p <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[2]][c(1)])))
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[3]][c(1)])))
output_a <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[5]][c(1)])))
# Add Outcomes and Descriptions together; name the columns; and remove the row names.
output_ordered_named <- data.frame(cbind(descriptions, output_r, output_p, output_S, output_a))
colnames(output_ordered_named) <- c("descriptions", "rho_correlation", "p_value", "S_statistics", "alternative")
rownames(output_ordered_named) <- NULL
output_ordered_named
method_cor == "kendall"
method_cor = "kendall"
if(method_cor == "pearson"){
output_t <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[1]][c(1)])))
output_df <-t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[2]][c(1)])))
output_p <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[3]][c(1)])))
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[4]][c(1)])))
output_a <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[6]][c(1)])))
# Add Outcomes and Descriptions together; name the columns; and remove the row names.
output_ordered_named <- data.frame(cbind(descriptions, output_r, output_df, output_p, output_t, output_a))
colnames(output_ordered_named) <- c("descriptions", "correlation", "df", "p_value", "t_statistics", "alternative")
rownames(output_ordered_named) <- NULL
} else if (method_cor == "spearman" | method_cor == "kendall"){
output_S <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[1]][c(1)])))
output_p <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[2]][c(1)])))
output_r <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[3]][c(1)])))
output_a <- t(as.data.frame(lapply(output, function(output) unlist(output$correlation)[[5]][c(1)])))
# Add Outcomes and Descriptions together; name the columns; and remove the row names.
output_ordered_named <- data.frame(cbind(descriptions, output_r, output_p, output_S, output_a))
if(method_cor == "spearman"){
colnames(output_ordered_named) <- c("descriptions", "rho_correlation", "p_value", "S_statistics", "alternative")
}else if (method_cor == "kendall")
colnames(output_ordered_named) <- c("descriptions", "tau_correlation", "p_value", "z_statistics", "alternative")
rownames(output_ordered_named) <- NULL
}
output_ordered_named
output
output_ordered_named
Language_based_assessment_data_8[8]
y <- as_tibble_col(as.factor(Language_based_assessment_data_8[8]))
y
y <- as.factor(Language_based_assessment_data_8[8]))
y
Language_based_assessment_data_8[8]
y <- as.factor(Language_based_assessment_data_8$gender))
y <- as.factor(Language_based_assessment_data_8$gender)
y
y <- as_tibbl_col(as.factor(Language_based_assessment_data_8$gender))
y <- as_tibble_col(as.factor(Language_based_assessment_data_8$gender))
y
colnames(y) <- "gender"
y
x <- wordembeddings4_4
y <- as_tibble_col(as.factor(Language_based_assessment_data_8$gender))
colnames(y) <- "gender"
x
y
GAD_diagnoses_extratrees <- textTrain(x,
y,
extremely_randomised_splitrule = "extratrees",
preprocess_PCA = c(0.1))
GAD_diagnoses_extratrees
GAD_diagnoses_extratrees <- textTrain(x,
y,
extremely_randomised_splitrule = "extratrees",
preprocess_PCA = c(0.1, 0.3))
GAD_diagnoses_extratrees
GAD_diagnoses_norm <- textTrain(x,
y,
preprocess_PCA = c(0.1, 0.3),
mtry = c(1, 10),
min_n = c(1, 10),
eval_measure = "bal_accuracy")
use warnings()
warnings()
GAD_diagnoses_norm
library(text)
devtools::document()
