ds <- read.csv(file="/Users/oscarkjell/Library/Containers/com.wdc.WDDesktop.WDDesktopFinderSync/Data/volumes/afe4cf6a-179a-4f4b-a4fd-212e45e87569/Oscar's My Cloud Home/Family/00 SM and Social Desirability/05 Analysis/data_item_level_cleaned.csv", sep = ",", dec = ".", header=TRUE)
ds
K_DATA <- tibble(ds$Dep_all, ds$Worry_all, ds$PHQtot,  ds$GADtot, ds$PSWQtot, ds$SDStot, ds$LieScaletot, ds$MCSDStot)
names(K_DATA) <- c("dep_all", "wor_all", "PHQtot",  "GADtot", "PSWQtot", "SDStot", "LieScaletot", "MCSDStot")
#Depression norms
ds$SSS_Depression_high <- textSimilarityNorm(wordembeddings_SM$dep_all, wordembeddings_norms$depressionnorm84)
ds$SSS_Depression_low <- textSimilarityNorm(wordembeddings_SM$dep_all, wordembeddings_norms$notatalldepressed0)
ds$SSS_Depression_Bipolar <- SSS_Depression_high - SSS_Depression_low
"Worry norms"
ds$SSS_Worry_high <- textSimilarityNorm(wordembeddings_SM$wor_all, wordembeddings_norms$worrynorm59)
ds$SSS_Worry_low <- textSimilarityNorm(wordembeddings_SM$wor_all, wordembeddings_norms$notatallworried0)
ds$SSS_Worry_Bipolar <- SSS_Worry_high - SSS_Worry_low
# Predicting valence socores
ds$predicted_valence_scores_dep_all <- textPredict(anew_valence_traings, wordembeddings_SM$dep_all)
ds$predicted_valence_scores_dep_all <- ds$predicted_valence_scores_dep_all$.pred
predicted_valence_scores_wor_all <- textPredict(anew_valence_traings, wordembeddings_SM$wor_all)
ds$predicted_valence_scores_wor_all <- predicted_valence_scores_wor_all$.pred
# Descri
psych::describe(ds$PHQtot)
psych::describe(ds$SSS_Depression_high)
psych::describe(ds$PHQtot)
psych::describe(ds$GADtot)
psych::describe(ds$PSWQtot)
psych::describe(ds$SSS_Worry_Bipolar)
psych::describe(ds$SSS_Depression_Bipolar)
psych::describe(ds$SSS_Depression_hig)
psych::describe(ds$SSS_Worry_high)
psych::describe(ds$SSS_Worry_low)
psych::describe(ds$SSS_Depression_low)
psych::describe(ds$predicted_valence_scores_dep_all)
psych::describe(ds$predicted_valence_scores_wor_all)
psych::describe(ds$SDStot)
psych::describe(ds$LieScaletot)
psych::describe(ds$MCSDStot)
ds_describe <- ds[, c("PHQtot")]
ds_describe
ds_describe <- ds[, c("PHQtot", "SSS_Depression_high")]
ds_describe
ds_describe <- ds[, c("PHQtot", "SSS_Depression_high", "PHQtot", "GADtot", "PSWQtot",
]
ds_describe <- ds[, c("PHQtot", "SSS_Depression_high", "PHQtot", "GADtot", "PSWQtot",
"SSS_Worry_Bipolar", "SSS_Depression_Bipolar", "SSS_Depression_hig", "SSS_Worry_high",
"SSS_Worry_low", "SSS_Depression_low", "predicted_valence_scores_dep_all",
"predicted_valence_scores_wor_all", "SDStot", "LieScaletot", "MCSDStot")]
# Descri
psych::describe(ds$PHQtot)
psych::describe(ds$SSS_Depression_high)
psych::describe(ds$PHQtot)
psych::describe(ds$GADtot)
psych::describe(ds$PSWQtot)
psych::describe(ds$SSS_Worry_Bipolar)
psych::describe(ds$SSS_Depression_Bipolar)
psych::describe(ds$SSS_Depression_hig)
psych::describe(ds$SSS_Worry_high)
psych::describe(ds$SSS_Worry_low)
psych::describe(ds$SSS_Depression_low)
psych::describe(ds$predicted_valence_scores_dep_all)
psych::describe(ds$predicted_valence_scores_wor_all)
psych::describe(ds$SDStot)
psych::describe(ds$LieScaletot)
psych::describe(ds$MCSDStot)
ds_describe <- ds[, c("PHQtot", "SSS_Depression_high", "PHQtot", "GADtot", "PSWQtot",
"SSS_Worry_Bipolar", "SSS_Depression_Bipolar", "SSS_Depression_hig", "SSS_Worry_high",
"SSS_Worry_low", "SSS_Depression_low", "predicted_valence_scores_dep_all",
"predicted_valence_scores_wor_all", "SDStot", "LieScaletot", "MCSDStot")]
ds_describe <- ds[, c("PHQtot", "SSS_Depression_high", "PHQtot", "GADtot", "PSWQtot")]
ds_describe
ds_describe <- ds[, c("PHQtot", "SSS_Depression_high", "PHQtot", "GADtot", "PSWQtot",
"SSS_Worry_Bipolar", "SSS_Depression_Bipolar", "SSS_Depression_hig", "SSS_Worry_high")]
ds_describe <- ds[, c("PHQtot", "SSS_Depression_high", "PHQtot", "GADtot", "PSWQtot",
"SSS_Worry_Bipolar", "SSS_Depression_Bipolar", "SSS_Depression_high", "SSS_Worry_high",
"SSS_Worry_low", "SSS_Depression_low", "predicted_valence_scores_dep_all",
"predicted_valence_scores_wor_all", "SDStot", "LieScaletot", "MCSDStot")]
ds_describe
psych::describe(ds_describe)
tidyverse::tidy(psych::describe(ds_describe))
help(tidy)
broom::tidy(psych::describe(ds_describe))
ds_describe
broom::tidy(psych::describe(ds_describe))
ds_describe
psych::describe(ds_describe)
as_tibble(psych::describe(ds_describe))
Variable_names <- c("PHQtot", "SSS_Depression_high", "PHQtot", "GADtot", "PSWQtot",
"SSS_Worry_Bipolar", "SSS_Depression_Bipolar", "SSS_Depression_high", "SSS_Worry_high",
"SSS_Worry_low", "SSS_Depression_low", "predicted_valence_scores_dep_all",
"predicted_valence_scores_wor_all", "SDStot", "LieScaletot", "MCSDStot")
table3_dat <- as_tibble(psych::describe(ds_describe))
table3_dat_a <- table3_dat[, c("n", "mean", "sd", "min", "max", "range", "skew", "kurtosis")]
Table3 <- cbind(Variable_names, table3_dat_a)
Table3
write_csv(Table3, "Table3.csv")
write_csv2(Table3, "Table3.csv")
cor.test(ds$SSS_Depression_high, ds$PHQtot, method = "spearman")
#####
#Spearman
cor.test(ds$SSS_Depression_high, ds$PHQtot, method = "spearman")
cor.test(ds$SSS_Depression_high, ds$PHQ1, method = "spearman")
cor.test(ds$SSS_Depression_high, ds$PHQ2, method = "spearman")
cor.test(ds$SSS_Depression_high, ds$PHQ3, method = "spearman")
cor.test(ds$SSS_Depression_high, ds$PHQ4, method = "spearman")
cor.test(ds$SSS_Depression_high, ds$PHQ5, method = "spearman")
cor.test(ds$SSS_Depression_high, ds$HPQ6, method = "spearman")
cor.test(ds$SSS_Depression_high, ds$PHQ7, method = "spearman")
cor.test(ds$SSS_Depression_high, ds$PHQ8, method = "spearman")
cor.test(ds$SSS_Depression_high, ds$PHQ9, method = "spearman")
cor.test(ds$SSS_Depression_Bipolar, ds$PHQtot, method = "spearman")
cor.test(ds$SSS_Depression_Bipolar, ds$PHQtot, method = "spearman")
cor.test(ds$SSS_Depression_Bipolar, ds$PHQ1, method = "spearman")
cor.test(ds$SSS_Depression_Bipolar, ds$PHQ2, method = "spearman")
cor.test(ds$SSS_Depression_Bipolar, ds$PHQ3, method = "spearman")
cor.test(ds$SSS_Depression_Bipolar, ds$PHQ4, method = "spearman")
cor.test(ds$SSS_Depression_Bipolar, ds$PHQ5, method = "spearman")
cor.test(ds$SSS_Depression_Bipolar, ds$HPQ6, method = "spearman")
cor.test(ds$SSS_Depression_Bipolar, ds$PHQ7, method = "spearman")
cor.test(ds$SSS_Depression_Bipolar, ds$PHQ8, method = "spearman")
cor.test(ds$SSS_Depression_Bipolar, ds$PHQ9, method = "spearman")
psych::describe(ds$PHQ1)
# Table 6
#Spearman
cor.test(ds$SSS_Worry_high, ds$GADtot, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD1, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD2, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD3, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD4, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD5, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD6, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD7, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD8, method = "spearman")
# Table 6
#Spearman
cor.test(ds$SSS_Worry_high, ds$GADtot, method = "spearman")
# Table 6
#Spearman
cor.test(ds$SSS_Worry_high, ds$GADtot, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD1, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD2, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD3, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD4, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD5, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD6, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$GAD7, method = "spearman")
# Bipolar
cor.test(ds$SSS_Worry_Bipolar, ds$GADtot, method = "spearman")
# Bipolar
cor.test(ds$SSS_Worry_Bipolar, ds$GADtot, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$GAD1, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$GAD2, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$GAD3, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$GAD4, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$GAD5, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$GAD6, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$GAD7, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$GAD8, method = "spearman")
#Correlation matrix Total score for Uni, Bipolar and Rating Scales, OBS! valence included
Scalescorrelated <- data.frame( ds$PHQtot, ds$GADtot, ds$PSWQtot,
ds$SSS_Depression_Bipolar, ds$SSS_Worry_Bipolar, ds$SSS_Depression_high, ds$SSS_Worry_high, ds$MCSDStot, ds$LieScaletot, ds$SDStot)
# Bipolar
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQtot, method = "spearman")
# Table 7
#Spearman
cor.test(ds$SSS_Worry_high, ds$PSWQtot, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ1, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ2, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ3, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ4, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ5, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ6, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ7, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ8, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ8, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ8, method = "spearman")
# Table 7
#Spearman
cor.test(ds$SSS_Worry_high, ds$PSWQtot, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ1, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ2, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ3, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ4, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ5, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ6, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ7, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ8, method = "spearman")
# Bipolar
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQtot, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ1, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ2, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ3, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ4, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ5, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ6, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ7, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ8, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ2, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ4, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ5, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ6, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ7, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ9, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ12, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ13, method = "spearman")
#Spearman
cor.test(ds$SSS_Worry_high, ds$PSWQtot, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ2, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ4, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ5, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ6, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ7, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ9, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ12, method = "spearman")
cor.test(ds$SSS_Worry_high, ds$PSWQ13, method = "spearman")
# Bipolar
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQtot, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ2, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ4, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ5, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ6, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ7, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ9, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ12, method = "spearman")
cor.test(ds$SSS_Worry_Bipolar, ds$PSWQ13, method = "spearman")
# Table 5
cor.test(ds$predicted_valence_scores_dep_all, ds$PHQtot, method = "spearman")
cor.test(ds$predicted_valence_scores_dep_all, ds$PHQ1, method = "spearman")
cor.test(ds$predicted_valence_scores_dep_all, ds$PHQ2, method = "spearman")
cor.test(ds$predicted_valence_scores_dep_all, ds$PHQ3, method = "spearman")
cor.test(ds$predicted_valence_scores_dep_all, ds$PHQ4, method = "spearman")
cor.test(ds$predicted_valence_scores_dep_all, ds$PHQ5, method = "spearman")
cor.test(ds$predicted_valence_scores_dep_all, ds$HPQ6, method = "spearman")
cor.test(ds$predicted_valence_scores_dep_all, ds$PHQ7, method = "spearman")
cor.test(ds$predicted_valence_scores_dep_all, ds$PHQ8, method = "spearman")
cor.test(ds$predicted_valence_scores_dep_all, ds$PHQ9, method = "spearman")
# Table 8
cor.test(ds$predicted_valence_scores_wor_all, ds$GADtot, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$GAD1, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$GAD2, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$GAD3, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$GAD4, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$GAD5, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$GAD6, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$GAD7, method = "spearman")
# Table 9: VALENCE
cor.test(ds$predicted_valence_scores_wor_all, ds$PSWQtot, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$PSWQ2, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$PSWQ4, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$PSWQ5, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$PSWQ6, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$PSWQ7, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$PSWQ9, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$PSWQ12, method = "spearman")
cor.test(ds$predicted_valence_scores_wor_all, ds$PSWQ13, method = "spearman")
#Correlation matrix Total score for Uni, Bipolar and Rating Scales, OBS! valence included
Scalescorrelated <- data.frame( ds$PHQtot, ds$GADtot, ds$PSWQtot,
ds$SSS_Depression_Bipolar, ds$SSS_Worry_Bipolar,
ds$SSS_Depression_high, ds$SSS_Worry_high,
ds$predicted_valence_scores_dep_all, ds$predicted_valence_scores_wor_all,
ds$MCSDStot, ds$LieScaletot, ds$SDStot)
library(Hmisc)
corstarsl <- function(x){
require(Hmisc)
x <- as.matrix(x)
R <- rcorr(x, type="spearman")$r
p <- rcorr(x, type="spearman")$P
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
## remove last column and return the matrix (which is now a data frame)
Rnew <- cbind(Rnew[1:length(Rnew)-1])
return(Rnew)
}
ScalescorrelatedTable <- corstarsl(Scalescorrelated)
ScalescorrelatedTable
write_csv2(ScalescorrelatedTable, "Scales_Correlated_All_Table10.csv")
PHQ_trainings
PHQ_trainings$train_PHQ9$correlation
PHQ_trainings$train_PHQtot$correlation
PHQ_trainings
PHQ_trainings$train_PHQ_tot$correlation
PHQ_trainings$trainPHQtot$correlation
PHQ_trainings$train_PHQ9$correlation
PHQ_trainings$train_PHQ9$correlation
PHQ_trainings$trainPHQtot$correlation
PHQ_trainings$train_PHQ1$correlation
PHQ_trainings$train_PHQ2$correlation
PHQ_trainings$train_PHQ3$correlation
PHQ_trainings$train_PHQ4$correlation
PHQ_trainings$train_PHQ5$correlation
PHQ_trainings$train_PHQ6$correlation
PHQ_trainings$train_PHQ7$correlation
PHQ_trainings$train_PHQ8$correlation
PHQ_trainings$train_PHQ9$correlation
# Table 8
GAD_trainings$trainGADtot$correlation
GAD_trainings$train_GAD1$correlation
GAD_trainings  <- read_rds("GAD_trainings.rds")
PSWQ_trainings <- read_rds("PSWQ_trainings.rds")
Social_Desirability_trainings <- read_rds("Social_Desirability_trainings.rds")
# Table 8
GAD_trainings$trainGADtot$correlation
GAD_trainings
# Table 8
GAD_trainings$train_GADtot$correlation
# Table 8
GAD_trainings$train_GADtot$correlation
GAD_trainings$train_GAD1$correlation
GAD_trainings$train_GAD2$correlation
GAD_trainings$train_GAD3$correlation
GAD_trainings$train_GAD4$correlation
GAD_trainings$train_GAD5$correlation
GAD_trainings$train_GAD6$correlation
GAD_trainings$train_GAD7$correlation
Social_Desirability_trainings
Social_Desirability_trainings$train_dep_all_MCSDStot$correlation
Social_Desirability_trainings$train_dep_all_LieScaletot$correlation
Social_Desirability_trainings$train_dep_all_SDStot$correlation
Social_Desirability_trainings$train_dep_all_MCSDStot$correlation
Social_Desirability_trainings$train_wor_all_MCSDStot$correlation
Social_Desirability_trainings$train_wor_all_LieScaletot$correlation
Social_Desirability_trainings$train_wor_all_SDStot$correlation
train_PSWQtot <- textTrainRegression(wordembeddings_SM$wor_all, K_DATA$PSWQtot, method_cor = "spearman", preprocess_PCA_thresh = "PCA_component_algorithm")
#Item level
train_ds_PSWQ2 <- textTrainRegression(wordembeddings_SM$wor_all, ds$PSWQ2, method_cor = "spearman", preprocess_PCA_thresh = "PCA_component_algorithm")
train_ds_PSWQ4 <- textTrainRegression(wordembeddings_SM$wor_all, ds$PSWQ4, method_cor = "spearman", preprocess_PCA_thresh = "PCA_component_algorithm")
train_ds_PSWQ5 <- textTrainRegression(wordembeddings_SM$wor_all, ds$PSWQ5, method_cor = "spearman", preprocess_PCA_thresh = "PCA_component_algorithm")
train_ds_PSWQ6 <- textTrainRegression(wordembeddings_SM$wor_all, ds$PSWQ6, method_cor = "spearman", preprocess_PCA_thresh = "PCA_component_algorithm")
train_ds_PSWQ7 <- textTrainRegression(wordembeddings_SM$wor_all, ds$PSWQ7, method_cor = "spearman", preprocess_PCA_thresh = "PCA_component_algorithm")
train_ds_PSWQ9 <- textTrainRegression(wordembeddings_SM$wor_all, ds$PSWQ9, method_cor = "spearman", preprocess_PCA_thresh = "PCA_component_algorithm")
train_ds_PSWQ12 <- textTrainRegression(wordembeddings_SM$wor_all, ds$PSWQ12, method_cor = "spearman", preprocess_PCA_thresh = "PCA_component_algorithm")
train_ds_PSWQ13 <- textTrainRegression(wordembeddings_SM$wor_all, ds$PSWQ13, method_cor = "spearman", preprocess_PCA_thresh = "PCA_component_algorithm")
PSWQ_trainings <- list(train_PSWQtot, train_PSWQ2, train_PSWQ4, train_PSWQ5, train_PSWQ6, train_PSWQ7, train_PSWQ9, train_PSWQ12, train_PSWQ13)
names(PSWQ_trainings) <- c("train_PSWQtot", "train_PSWQ2", "train_PSWQ4", "train_PSWQ5", "train_PSWQ6", "train_PSWQ7", "train_PSWQ9", "train_PSWQ12", "train_PSWQ13")
write_rds(PSWQ_trainings2, "PSWQ_trainings.rds")
write_rds(PSWQ_trainings, "PSWQ_trainings2.rds")
PSWQ_trainings <- list(train_PSWQtot, train_ds_PSWQ2, train_ds_PSWQ4, train_ds_PSWQ5, train_ds_PSWQ6,
train_ds_PSWQ7, train_ds_PSWQ9, train_ds_PSWQ12, train_ds_PSWQ13)
names(PSWQ_trainings) <- c("train_PSWQtot", "train_PSWQ2", "train_PSWQ4", "train_PSWQ5", "train_PSWQ6", "train_PSWQ7", "train_PSWQ9", "train_PSWQ12", "train_PSWQ13")
write_rds(PSWQ_trainings, "PSWQ_trainings2.rds")
read_rds("PSWQ_trainings2.rds")
# Table 8 WRONG!!!!
PSWQ_trainings2$train_PSWQtot$correlation
# Table 8
PSWQ_trainings2$train_PSWQtot$correlation
# Table 8
PSWQ_trainings$train_PSWQtot$correlation
#write_rds(PSWQ_trainings, "PSWQ_trainings2.rds")
PSWQ_trainings2 <- read_rds("PSWQ_trainings2.rds")
# Table 8
PSWQ_trainings2$train_PSWQtot$correlation
# Table 8
PSWQ_trainings2$train_PSWQtot$correlation
PSWQ_trainings2$train_PSWQ2$correlation
PSWQ_trainings2$train_PSWQ3$correlation
PSWQ_trainings2$train_PSWQ5$correlation
# Table 8
PSWQ_trainings2$train_PSWQtot$correlation
PSWQ_trainings2$train_PSWQ2$correlation
PSWQ_trainings2$train_PSWQ4$correlation
PSWQ_trainings2$train_PSWQ5$correlation
PSWQ_trainings2$train_PSWQ6$correlation
PSWQ_trainings2$train_PSWQ7$correlation
PSWQ_trainings2$train_PSWQ9$correlation
PSWQ_trainings2$train_PSWQ12$correlation
PSWQ_trainings2$train_PSWQ13$correlation
200*60000
library(text)
trained <- textTrainRandomForest(wordembeddings4$harmonytext,
example_categories,
#outside_strata_y = NULL,
#inside_strata_y = NULL,
mtry = c(1),
min_n = c(1),
trees = c(1000),
preprocess_PCA = c(1, 2),
extremely_randomised_splitrule = "gini",
multi_cores = TRUE,
eval_measure = "bal_accuracy") #sens bal_accuracy f_measure
example_categories <- as.factor(c(1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2))
trained <- textTrainRandomForest(wordembeddings4$harmonytext,
example_categories,
#outside_strata_y = NULL,
#inside_strata_y = NULL,
mtry = c(1),
min_n = c(1),
trees = c(1000),
preprocess_PCA = c(1, 2),
extremely_randomised_splitrule = "gini",
multi_cores = TRUE,
eval_measure = "bal_accuracy") #sens bal_accuracy f_measure
trained
trained <- textTrainRandomForest(wordembeddings4$harmonytext,
example_categories,
#outside_strata_y = NULL,
#inside_strata_y = NULL,
mtry = c(1),
min_n = c(1),
trees = c(1000, 1001, 999),
preprocess_PCA = c(3, 4),
extremely_randomised_splitrule = "gini",
multi_cores = TRUE,
eval_measure = "bal_accuracy") #sens bal_accuracy f_measure
trained
library(text)
trained <- textTrainRandomForest(wordembeddings4$harmonytext,
example_categories,
#outside_strata_y = NULL,
#inside_strata_y = NULL,
mode_rf = "classification",
mtry = c(1),
min_n = c(1),
trees = c(1000),
preprocess_PCA = c(0.95),
extremely_randomised_splitrule = NULL,
multi_cores = TRUE,
eval_measure = "roc_auc") #sens bal_accuracy f_measure
testthat::expect_that(trained, testthat::is_a("list"))
testthat::expect_is(trained$truth_predictions$truth[1], "factor")
trained
#' purple, red, white, yellow
#'
#' @param text character vector
#' @param fg foreground colour, defaults to white
#' @param bg background colour, defaults to transparent
#' @export
#' @examples
#' print(colourise("Red", "red"))
#' cat(colourise("Red", "red"), "\n")
#' cat(colourise("White on red", "white", "red"), "\n")
colourise <- function(text, fg = "black", bg = NULL) {
term <- Sys.getenv()["TERM"]
colour_terms <- c("xterm-color","xterm-256color", "screen", "screen-256color")
if(rcmd_running() || !any(term %in% colour_terms, na.rm = TRUE)) {
return(text)
}
col_escape <- function(col) {
paste0("\033[", col, "m")
}
col <- .fg_colours[tolower(fg)]
if (!is.null(bg)) {
col <- paste0(col, .bg_colours[tolower(bg)], sep = ";")
}
init <- col_escape(col)
reset <- col_escape("0")
paste0(init, text, reset)
}
.fg_colours <- c(
"black" = "0;30",
"blue" = "0;34",
"green" = "0;32",
"cyan" = "0;36",
"red" = "0;31",
"purple" = "0;35",
"brown" = "0;33",
"light gray" = "0;37",
"dark gray" = "1;30",
"light blue" = "1;34",
"light green" = "1;32",
"light cyan" = "1;36",
"light red" = "1;31",
"light purple" = "1;35",
"yellow" = "1;33",
"white" = "1;37"
)
.bg_colours <- c(
"black" = "40",
"red" = "41",
"green" = "42",
"brown" = "43",
"blue" = "44",
"purple" = "45",
"cyan" = "46",
"light gray" = "47"
)
rcmd_running <- function() {
nchar(Sys.getenv('R_TESTS')) != 0
}
#  packageStartupMessage(
#    crayon::green("This is text (version 0.8.70). \n"),
#    crayon::blue("Newer versions may have updated default settings to reflect current understandings of the state-of-the-art.")
#  )
packageStartupMessage(colourise(
"This is text (version 0.8.70). \n Newer versions may have updated default settings to reflect current understandings of the state-of-the-art."
),  fg = "black", bg = NULL
)
#  packageStartupMessage(
#    crayon::green("This is text (version 0.8.70). \n"),
#    crayon::blue("Newer versions may have updated default settings to reflect current understandings of the state-of-the-art.")
#  )
packageStartupMessage(colourise(
"This is text (version 0.8.70). \n Newer versions may have updated default settings to reflect current understandings of the state-of-the-art."
),  fg = "blue", bg = NULL
)
#  packageStartupMessage(
#    crayon::green("This is text (version 0.8.70). \n"),
#    crayon::blue("Newer versions may have updated default settings to reflect current understandings of the state-of-the-art.")
#  )
packageStartupMessage(colourise(
"This is text (version 0.8.70). \n Newer versions may have updated default settings to reflect current understandings of the state-of-the-art."
,  fg = "blue", bg = NULL)
)
