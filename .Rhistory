model_class = BertModel
} else if (model == "bert-base-multilingual-cased"){
pretrained_weights = 'bert-base-multilingual-cased'
tokenizer_class = BertTokenizer
model_class = BertModel
}  else if (model == "openai-gpt"){
pretrained_weights = 'openai-gpt'
tokenizer_class = OpenAIGPTTokenizer
model_class = OpenAIGPTModel
} else if (model == "gpt2"){
pretrained_weights = 'GPT2Tokenizer'
tokenizer_class = OpenAIGPTTokenizer
model_class = GPT2Model
} else if (model == "ctrl"){
pretrained_weights = 'ctrl'
tokenizer_class = CTRLTokenizer
model_class = CTRLModel
} else if (model == "transfo-xl-wt103"){
pretrained_weights = 'transfo-xl-wt103'
tokenizer_class = TransfoXLTokenizer
model_class = TransfoXLModel
} else if (model == "xlnet-base-cased"){
pretrained_weights = 'xlnet-base-cased'
tokenizer_class = XLNetTokenizer
model_class = XLNetModel
} else if (model == "xlm-mlm-enfr-1024"){
pretrained_weights = 'xlm-mlm-enfr-1024'
tokenizer_class = XLMTokenizer
model_class = XLMModel
} else if (model == "distilbert-base-uncased"){
pretrained_weights = 'distilbert-base-uncased'
tokenizer_class = DistilBertTokenizer
model_class = DistilBertModel
} else if (model == "roberta-base"){
pretrained_weights = 'roberta-base'
tokenizer_class = RobertaTokenizer
model_class = RobertaModel
} else if (model == "xlm-roberta-base"){
pretrained_weights = 'xlm-roberta-base'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
} else if (model == "xlm-roberta-large"){
pretrained_weights = 'xlm-roberta-large'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
}
# Setting up the specifics of the models; the parameters for HuggingFace.
if(model == "bert-base-uncased"){
pretrained_weights = 'bert-base-uncased'
tokenizer_class = BertTokenizer
model_class = BertModel
} else if (model == "bert-base-multilingual-uncased"){
pretrained_weights = 'bert-base-multilingual-uncased'
tokenizer_class = BertTokenizer
model_class = BertModel
} else if (model == "bert-base-multilingual-cased"){
pretrained_weights = 'bert-base-multilingual-cased'
tokenizer_class = BertTokenizer
model_class = BertModel
}  else if (model == "openai-gpt"){
pretrained_weights = 'openai-gpt'
tokenizer_class = OpenAIGPTTokenizer
model_class = OpenAIGPTModel
} else if (model == "gpt2"){
pretrained_weights = 'GPT2Tokenizer'
tokenizer_class = OpenAIGPTTokenizer
model_class = GPT2Model
} else if (model == "ctrl"){
pretrained_weights = 'ctrl'
tokenizer_class = CTRLTokenizer
model_class = CTRLModel
} else if (model == "transfo-xl-wt103"){
pretrained_weights = 'transfo-xl-wt103'
tokenizer_class = TransfoXLTokenizer
model_class = TransfoXLModel
} else if (model == "xlnet-base-cased"){
pretrained_weights = 'xlnet-base-cased'
tokenizer_class = XLNetTokenizer
model_class = XLNetModel
} else if (model == "xlm-mlm-enfr-1024"){
pretrained_weights = 'xlm-mlm-enfr-1024'
tokenizer_class = XLMTokenizer
model_class = XLMModel
} else if (model == "distilbert-base-uncased"){
pretrained_weights = 'distilbert-base-uncased'
tokenizer_class = DistilBertTokenizer
model_class = DistilBertModel
} else if (model == "roberta-base"){
pretrained_weights = 'roberta-base'
tokenizer_class = RobertaTokenizer
model_class = RobertaModel
} else if (model == "xlm-roberta-base"){
pretrained_weights = 'xlm-roberta-base'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
} else if (model == "xlm-roberta-large"){
pretrained_weights = 'xlm-roberta-large'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
} else if (is.null(model)){
pretrained_weights
tokenizer_class
model_class
}
is.null(model)
# Setting up the specifics of the models; the parameters for HuggingFace.
if(model == "bert-base-uncased"){
pretrained_weights = 'bert-base-uncased'
tokenizer_class = BertTokenizer
model_class = BertModel
} else if (model == "bert-base-multilingual-uncased"){
pretrained_weights = 'bert-base-multilingual-uncased'
tokenizer_class = BertTokenizer
model_class = BertModel
} else if (model == "bert-base-multilingual-cased"){
pretrained_weights = 'bert-base-multilingual-cased'
tokenizer_class = BertTokenizer
model_class = BertModel
}  else if (model == "openai-gpt"){
pretrained_weights = 'openai-gpt'
tokenizer_class = OpenAIGPTTokenizer
model_class = OpenAIGPTModel
} else if (model == "gpt2"){
pretrained_weights = 'GPT2Tokenizer'
tokenizer_class = OpenAIGPTTokenizer
model_class = GPT2Model
} else if (model == "ctrl"){
pretrained_weights = 'ctrl'
tokenizer_class = CTRLTokenizer
model_class = CTRLModel
} else if (model == "transfo-xl-wt103"){
pretrained_weights = 'transfo-xl-wt103'
tokenizer_class = TransfoXLTokenizer
model_class = TransfoXLModel
} else if (model == "xlnet-base-cased"){
pretrained_weights = 'xlnet-base-cased'
tokenizer_class = XLNetTokenizer
model_class = XLNetModel
} else if (model == "xlm-mlm-enfr-1024"){
pretrained_weights = 'xlm-mlm-enfr-1024'
tokenizer_class = XLMTokenizer
model_class = XLMModel
} else if (model == "distilbert-base-uncased"){
pretrained_weights = 'distilbert-base-uncased'
tokenizer_class = DistilBertTokenizer
model_class = DistilBertModel
} else if (model == "roberta-base"){
pretrained_weights = 'roberta-base'
tokenizer_class = RobertaTokenizer
model_class = RobertaModel
} else if (model == "xlm-roberta-base"){
pretrained_weights = 'xlm-roberta-base'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
} else if (model == "xlm-roberta-large"){
pretrained_weights = 'xlm-roberta-large'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
} else if (is.null(model)==TRUE){
pretrained_weights
tokenizer_class
model_class
}
is.null(model)
model
# Setting up the specifics of the models; the parameters for HuggingFace.
if(model == "bert-base-uncased"){
pretrained_weights = 'bert-base-uncased'
tokenizer_class = BertTokenizer
model_class = BertModel
} else if (model == "bert-base-multilingual-uncased"){
pretrained_weights = 'bert-base-multilingual-uncased'
tokenizer_class = BertTokenizer
model_class = BertModel
} else if (model == "bert-base-multilingual-cased"){
pretrained_weights = 'bert-base-multilingual-cased'
tokenizer_class = BertTokenizer
model_class = BertModel
}  else if (model == "openai-gpt"){
pretrained_weights = 'openai-gpt'
tokenizer_class = OpenAIGPTTokenizer
model_class = OpenAIGPTModel
} else if (model == "gpt2"){
pretrained_weights = 'GPT2Tokenizer'
tokenizer_class = OpenAIGPTTokenizer
model_class = GPT2Model
} else if (model == "ctrl"){
pretrained_weights = 'ctrl'
tokenizer_class = CTRLTokenizer
model_class = CTRLModel
} else if (model == "transfo-xl-wt103"){
pretrained_weights = 'transfo-xl-wt103'
tokenizer_class = TransfoXLTokenizer
model_class = TransfoXLModel
} else if (model == "xlnet-base-cased"){
pretrained_weights = 'xlnet-base-cased'
tokenizer_class = XLNetTokenizer
model_class = XLNetModel
} else if (model == "xlm-mlm-enfr-1024"){
pretrained_weights = 'xlm-mlm-enfr-1024'
tokenizer_class = XLMTokenizer
model_class = XLMModel
} else if (model == "distilbert-base-uncased"){
pretrained_weights = 'distilbert-base-uncased'
tokenizer_class = DistilBertTokenizer
model_class = DistilBertModel
} else if (model == "roberta-base"){
pretrained_weights = 'roberta-base'
tokenizer_class = RobertaTokenizer
model_class = RobertaModel
} else if (model == "xlm-roberta-base"){
pretrained_weights = 'xlm-roberta-base'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
} else if (model == "xlm-roberta-large"){
pretrained_weights = 'xlm-roberta-large'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
} else if (is.null(model) == TRUE){
pretrained_weights
tokenizer_class
model_class
}
model = "NULL"
# Setting up the specifics of the models; the parameters for HuggingFace.
if(model == "bert-base-uncased"){
pretrained_weights = 'bert-base-uncased'
tokenizer_class = BertTokenizer
model_class = BertModel
} else if (model == "bert-base-multilingual-uncased"){
pretrained_weights = 'bert-base-multilingual-uncased'
tokenizer_class = BertTokenizer
model_class = BertModel
} else if (model == "bert-base-multilingual-cased"){
pretrained_weights = 'bert-base-multilingual-cased'
tokenizer_class = BertTokenizer
model_class = BertModel
}  else if (model == "openai-gpt"){
pretrained_weights = 'openai-gpt'
tokenizer_class = OpenAIGPTTokenizer
model_class = OpenAIGPTModel
} else if (model == "gpt2"){
pretrained_weights = 'GPT2Tokenizer'
tokenizer_class = OpenAIGPTTokenizer
model_class = GPT2Model
} else if (model == "ctrl"){
pretrained_weights = 'ctrl'
tokenizer_class = CTRLTokenizer
model_class = CTRLModel
} else if (model == "transfo-xl-wt103"){
pretrained_weights = 'transfo-xl-wt103'
tokenizer_class = TransfoXLTokenizer
model_class = TransfoXLModel
} else if (model == "xlnet-base-cased"){
pretrained_weights = 'xlnet-base-cased'
tokenizer_class = XLNetTokenizer
model_class = XLNetModel
} else if (model == "xlm-mlm-enfr-1024"){
pretrained_weights = 'xlm-mlm-enfr-1024'
tokenizer_class = XLMTokenizer
model_class = XLMModel
} else if (model == "distilbert-base-uncased"){
pretrained_weights = 'distilbert-base-uncased'
tokenizer_class = DistilBertTokenizer
model_class = DistilBertModel
} else if (model == "roberta-base"){
pretrained_weights = 'roberta-base'
tokenizer_class = RobertaTokenizer
model_class = RobertaModel
} else if (model == "xlm-roberta-base"){
pretrained_weights = 'xlm-roberta-base'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
} else if (model == "xlm-roberta-large"){
pretrained_weights = 'xlm-roberta-large'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
} else if (model == "NULL"){
pretrained_weights
tokenizer_class
model_class
}
pretrained_weights
tokenizer_class
tokenizer_class = T5Tokenizer
model_class = T5Model
model
model = "new"
model
# Setting up the specifics of the models; the parameters for HuggingFace.
if(model == "bert-base-uncased"){
pretrained_weights = 'bert-base-uncased'
tokenizer_class = BertTokenizer
model_class = BertModel
} else if (model == "bert-base-multilingual-uncased"){
pretrained_weights = 'bert-base-multilingual-uncased'
tokenizer_class = BertTokenizer
model_class = BertModel
} else if (model == "bert-base-multilingual-cased"){
pretrained_weights = 'bert-base-multilingual-cased'
tokenizer_class = BertTokenizer
model_class = BertModel
}  else if (model == "openai-gpt"){
pretrained_weights = 'openai-gpt'
tokenizer_class = OpenAIGPTTokenizer
model_class = OpenAIGPTModel
} else if (model == "gpt2"){
pretrained_weights = 'GPT2Tokenizer'
tokenizer_class = OpenAIGPTTokenizer
model_class = GPT2Model
} else if (model == "ctrl"){
pretrained_weights = 'ctrl'
tokenizer_class = CTRLTokenizer
model_class = CTRLModel
} else if (model == "transfo-xl-wt103"){
pretrained_weights = 'transfo-xl-wt103'
tokenizer_class = TransfoXLTokenizer
model_class = TransfoXLModel
} else if (model == "xlnet-base-cased"){
pretrained_weights = 'xlnet-base-cased'
tokenizer_class = XLNetTokenizer
model_class = XLNetModel
} else if (model == "xlm-mlm-enfr-1024"){
pretrained_weights = 'xlm-mlm-enfr-1024'
tokenizer_class = XLMTokenizer
model_class = XLMModel
} else if (model == "distilbert-base-uncased"){
pretrained_weights = 'distilbert-base-uncased'
tokenizer_class = DistilBertTokenizer
model_class = DistilBertModel
} else if (model == "roberta-base"){
pretrained_weights = 'roberta-base'
tokenizer_class = RobertaTokenizer
model_class = RobertaModel
} else if (model == "xlm-roberta-base"){
pretrained_weights = 'xlm-roberta-base'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
} else if (model == "xlm-roberta-large"){
pretrained_weights = 'xlm-roberta-large'
tokenizer_class = XLMRobertaTokenizer
model_class = XLMRobertaModel
} else if (model == "new"){
pretrained_weights
tokenizer_class
model_class
}
library(text)
textHuggingFace(
x,
contexts = TRUE,
decontexts = TRUE,
model = "new",
layers = '11:12',
return_tokens = TRUE,
pretrained_weights = 't5-small',
tokenizer_class = T5Tokenizer,
model_class = T5Model
)
.rs.restartR()
library(text)
wordembeddings_11 <- textHuggingFace(
x,
contexts = TRUE,
decontexts = TRUE,
model = "new",
layers = '11:12',
return_tokens = TRUE,
pretrained_weights = 't5-small',
tokenizer_class = T5Tokenizer,
model_class = T5Model
)
wordembeddings_10b <- textHuggingFace(x, layers = 'all', model = "xlm-roberta-large")
wordembeddings_10b
.rs.restartR()
library(text)
wordembeddings_11 <- textHuggingFace(
x,
contexts = TRUE,
decontexts = TRUE,
model = "new",
layers = '11:12',
return_tokens = TRUE,
pretrained_weights = 't5-small',
tokenizer_class = T5Tokenizer,
model_class = T5Model
)
wordembeddings_10b <- textHuggingFace(x, layers = 'all', model = "xlm-roberta-large")
x <- Language_based_assessment_data_8_10[1, 1]
wordembeddings_10b <- textHuggingFace(x, layers = 'all', model = "xlm-roberta-large")
library(text)
wordembeddings_11 <- textHuggingFace(x, layers = 'all', model = "t5-small")
wordembeddings_11 <- textHuggingFace(x, layers = 'all', model = "t5-small")
devtools::document()
pkgdown::build_site()
devtools::document()
library(text)
library(text)
sessionInfo()
library(reticulate)
py_available()
py_config()
x <- Language_based_assessment_data_8_10[1:2, 1:2]
wordembeddings <- textEmbed(x, layers = 9:11, context_layers = 11, decontext_layers = 9)
x <- Language_based_assessment_data_8_10[1:2, 1:2]
wordembeddings <- textHuggingFace(x, layers = 'all')
x
Language_based_assessment_data_8_10
Language_based_assessment_data_8_10[c(1, 5), 1:5]
Language_based_assessment_data_8_10[1:5, c(1, 5)]
Language_based_assessment_data_8_10[1:5, c(1, 5)]
Language_based_assessment_data_8_10[1:5, c(1, 5)]
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
init_site()
.onAttach <- function(libname, pkgname){
if(!grepl(x = R.Version()$arch, pattern = "64")){
warning("The text package requires running R on a 64-bit systems as it is dependent on torch from ptyhon; and you are not doing this.")
}
packageStartupMessage(cat(paste0("\033[0;", 32, "m", "This is text (version 0.7.14.9000).","\033[0m","\n"),
paste0("\033[0;", 34, "m", "Newer versions may have updated default settings to reflect current understandings of the state-of-the-art.","\033[0m")))
}
build_favicons()
library(pkgdown)
build_favicons()
help(readPNG)
install.packages("png")
build_home(pkg = ".", override = list(), preview = NA, quiet = TRUE)
use_github_actions()
usethis::use_github_actions()
usethis::use_github_actions_badge(name = "R-CMD-check", repo_spec = NULL)
usethis::use_github_actions_badge(name = "R-CMD-check")
build_home(pkg = ".", override = list(), preview = NA, quiet = TRUE)
pkgdown::build_site()
build_home(pkg = ".", override = list(), preview = NA, quiet = TRUE)
install.packages("rcmdcheck")
library(rcmdcheck)
rcmdcheck()
use_github()
usethis::use_github()
usethis::use_github()
usethis::use_github_actions()
usethis::use_github_actions_badge(name = "R-CMD-check")
rcmdcheck()
library(text)
library(text)
rcmdcheck()
devtools::document()
library(text)
rcmdcheck()
build_home(pkg = ".", override = list(), preview = NA, quiet = TRUE)
rcmdcheck()
rcmdcheck()
pkgdown::build_site()
pkgdown::build_site()
rcmdcheck()
devtools::document()
pkgdown::build_site()
library(text)
rcmdcheck()
#usethis::use_github()
tools::texi2pdf()
#usethis::use_github()
tools::texi2pdf()
#install.packages("rcmdcheck")
#library(rcmdcheck)
# rcmdcheck()
help(rcmdcheck)
rcmdcheck()
library(text)
devtools::use_travis()
usethis::use_travis()
rcmdcheck()
library(text)
rcmdcheck()
#install.packages("rcmdcheck")
#library(rcmdcheck)
# rcmdcheck()
system("R CMD Rd2pdf MyRpackage")
#install.packages("rcmdcheck")
#library(rcmdcheck)
# rcmdcheck()
system("R CMD Rd2pdf text")
#install.packages("rcmdcheck")
#library(rcmdcheck)
# rcmdcheck()
system("R CMD Rd2pdf")
#install.packages("rcmdcheck")
#library(rcmdcheck)
# rcmdcheck()
system(R CMD Rd2pdf)
#install.packages("rcmdcheck")
#library(rcmdcheck)
# rcmdcheck()
system("R CMD Rd2pdf")
#install.packages("rcmdcheck")
#library(rcmdcheck)
# rcmdcheck()
system("R CMD Rd2pdf text")
#install.packages("rcmdcheck")
#library(rcmdcheck)
# rcmdcheck()
system("R CMD Rd2pdf /Users/oscarkjell/Desktop/1 Projects/0 Research/0 text r-package/text")
#install.packages("rcmdcheck")
#library(rcmdcheck)
# rcmdcheck()
system("R CMD Rd2pdf /Users/oscarkjell/Desktop/1 Projects/0 Research/0 text r-package/text")
tools::texi2pdf()
tools::texi2pdf("/Users/oscarkjell/Desktop/1 Projects/0 Research/0 text r-package/text")
devtools::check()
