results <- textTrainLists(wordembeddings, ratings_data, nrFolds_k = 2, trainMethod = "randomForest")
results
expect_that(results, is_a("list"))
expect_is(results$predscores$harmonywords_ratings_data1..pred_old[1][1], 'numeric')
results$predscores$harmonywords_ratings_data1..pred_old[1][1]
test_diff_results <- textDiff(wordembeddings4_10$harmonytexts[1:9], wordembeddings4_10$satisfactiontexts,
method = "paired", Npermutations = 10, N_cluster_nodes = 1)
devtools::document()
#Data
wordembeddings <- wordembeddings4_10
data <- Language_based_assessment_data_8_10
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:2],
wordembeddings$harmonywords[1:2,],
wordembeddings$singlewords_we,
data$hilstotal[1:2],
split = "quartile",
Npermutations = 2,
n_per_split = 1,
pca = 0.9
)
df_for_plotting
expect_true(tibble::is_tibble(df_for_plotting))
expect_is(df_for_plotting$words[1], 'character')
expect_is(df_for_plotting$n[1], 'integer')
data$swlstotal[1:2]
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:2],
wordembeddings$harmonywords[1:2,],
wordembeddings$singlewords_we,
data$hilstotal[1:2],
data$swlstotal[1:2],
split = "quartile",
Npermutations = 2,
n_per_split = 1,
pca = 0.9
)
df_for_plotting
expect_true(tibble::is_tibble(df_for_plotting))
expect_is(df_for_plotting$words[1], 'character')
expect_is(df_for_plotting$n[1], 'integer')
# Dot Product Projection Plot
p <- textProjectionPlot(
word_data = DP_projections_HILS_SWLS_100,
k_n_words_to_test = FALSE,
min_freq_words = 1,
plot_n_words_square = 3,
plot_n_words_p = 3,
plot_n_word_extreme = 1,
plot_n_word_frequency = 1,
plot_n_words_middle = 1,
x_axes = TRUE,
y_axes = TRUE,
p_alpha = 0.05,
title_top = " Dot Product Projection (DPP)",
x_axes_label = "Low vs. High HILS score",
y_axes_label = "Low vs. High SWLS score",
p_adjust_method = "bonferroni",
scale_y_axes_lim = NULL)
expect_true(ggplot2::is.ggplot(p))
wordembeddings <- wordembeddings4_10[1:2, 1:2]
wordembeddings
wordembeddings <- wordembeddings4_10[1:2, 1:2]
wordembeddings4_10
wordembeddings <- wordembeddings4_10[1:2]
ratings_data1 <- factor(c("young",  "old"))
ratings_data2 <- factor(c("young",  "old"))
ratings_data <- tibble(ratings_data1, ratings_data2)
results <- textTrainLists(wordembeddings, ratings_data, nrFolds_k = 2, trainMethod = "randomForest")
expect_that(results, is_a("list"))
results
expect_is(results$predscores$harmonywords_ratings_data1..pred_old[1][1], 'numeric')
data$harmonywords[1:2]
#Data
wordembeddings <- wordembeddings4_10
data <- Language_based_assessment_data_8_10
data$harmonywords[1:2]
data$harmonywords[1:3]
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:3],
wordembeddings$harmonywords[1:3,],
wordembeddings$singlewords_we,
data$hilstotal[1:3],
split = "median",
Npermutations = 2,
n_per_split = 1
)
df_for_plotting
expect_true(tibble::is_tibble(df_for_plotting))
expect_is(df_for_plotting$words[1], 'character')
expect_is(df_for_plotting$n[1], 'integer')
library(text)
#Data
wordembeddings <- wordembeddings4_10
data <- Language_based_assessment_data_8_10
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:3],
wordembeddings$harmonywords[1:3,],
wordembeddings$singlewords_we,
data$hilstotal[1:3],
data$swlstotal[1:3],
split = "quartile",
Npermutations = 2,
n_per_split = 1,
pca = 0.9
)
expect_true(tibble::is_tibble(df_for_plotting))
expect_is(df_for_plotting$words[1], 'character')
expect_is(df_for_plotting$n[1], 'integer')
devtools::document()
library(text)
sq_data_outcome <- read.csv("/Users/oscarkjell/Desktop/1 Projects/0 Research/0 text r-package/text_data_examples/outcome_US_3_AllSQanswers.csv", sep=",")
sq_data_text <-    read.csv("/Users/oscarkjell/Desktop/1 Projects/0 Research/0 text r-package/text_data_examples/2 Study1-3_for_DLATK_TEXTdata.csv", sep=";")
#install.packages("lazy-load")
library(tidyverse)
library(data.table)
sq_data_text_long <- dcast(setDT(sq_data_text), X_DLATKid ~ X_wh1ws2th3ts4, value.var=c("X_text", "Study"))
head(sq_data_text_long)
nrow(sq_data_text_long)
sq_data <- merge(sq_data_text_long, sq_data_outcome, by.x="X_DLATKid", by.y="user_id")
sq_data <- as_tibble(sq_data)
sq_data <- rename(sq_data, harmonywords = X_text_1)
sq_data <- rename(sq_data, satisfactionwords = X_text_2)
sq_data <- rename(sq_data, harmonytexts = X_text_3)
sq_data <- rename(sq_data, satisfactiontexts = X_text_4)
sq_data <- sq_data %>%
mutate_at(vars(harmonywords, satisfactionwords, harmonytexts, satisfactiontexts), as.character)
head(sq_data)
nrow(sq_data)
#Data for tutorial
sq_data_tutorial <- sq_data %>%
select(harmonywords, satisfactionwords, harmonytexts, satisfactiontexts, hilstotal, swlstotal, age, gender) %>%
slice(1:10) %>%
select(1:4)
# Embeddings from huggingface
text_for_huggingface <- sq_data %>%
select(harmonywords, satisfactionwords) %>%
slice(1:3)
# Embeddings from huggingface
text_for_huggingface <- sq_data %>%
select(harmonywords, satisfactionwords) %>%
slice(1:3)
embeddings_from_huggingface <- textHuggingFace(text_for_huggingface)
embeddings_from_huggingface
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface)
embeddings_from_huggingface <- textHuggingFace(text_for_huggingface, layers = 1:2)
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface, layers = 1:2)
embeddings_from_huggingface
# usethis::use_data(embeddings_from_huggingface)
help(text_for_huggingface)
# usethis::use_data(embeddings_from_huggingface)
help(textHuggingFace)
embeddings_from_huggingface <- textHuggingFace(text_for_huggingface, layers = 1:2, decontexts = FALSE)
library(text)
embeddings_from_huggingface <- textHuggingFace(text_for_huggingface, layers = 1:2, decontexts = FALSE)
embeddings_from_huggingface <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = TRUE, decontexts = TRUE)
embeddings_from_huggingface <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = TRUE, decontexts = FALSE)
embeddings_from_huggingface <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = FALSE, decontexts = TRUE)
embeddings_from_huggingface4 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = FALSE, decontexts = FALSE)
embeddings_from_huggingface4
embeddings_from_huggingface1 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = TRUE, decontexts = TRUE)
embeddings_from_huggingface2 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = TRUE, decontexts = FALSE)
embeddings_from_huggingface3 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = FALSE, decontexts = TRUE)
embeddings_from_huggingface1
embeddings_from_huggingface2
embeddings_from_huggingface3
library(text)
embeddings_from_huggingface1 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = TRUE, decontexts = TRUE)
embeddings_from_huggingface2 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = TRUE, decontexts = FALSE)
embeddings_from_huggingface3 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = FALSE, decontexts = TRUE)
embeddings_from_huggingface4 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = FALSE, decontexts = FALSE)
embeddings_from_huggingface1
embeddings_from_huggingface2
embeddings_from_huggingface3
embeddings_from_huggingface4
embeddings_from_huggingface1
embeddings_from_huggingface2
text_for_huggingface <- sq_data %>%
select(harmonywords) %>%
slice(1:3)
embeddings_from_huggingface1 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = TRUE, decontexts = TRUE)
embeddings_from_huggingface2 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = TRUE, decontexts = FALSE)
embeddings_from_huggingface3 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = FALSE, decontexts = TRUE)
embeddings_from_huggingface4 <- textHuggingFace(text_for_huggingface, layers = 1:2, contexts = FALSE, decontexts = FALSE)
embeddings_from_huggingface4
embeddings_from_huggingface1
embeddings_from_huggingface2
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2, layers = 1:2)
aggregated_embeddings
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2[1], layers = 1:2)
embeddings_from_huggingface2[1]
embeddings_from_huggingface2[1][1]
embeddings_from_huggingface2[[1]][[1]]
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2[[1]][[1]], layers = 1:2)
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2[[1]][[1]][[1]], layers = 1:2)
embeddings_from_huggingface2[[1]][[1]][[1]]
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2, layers = 1:2)
embeddings_from_huggingface2
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2$context$harmonywords, layers = 1:2)
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2$context, layers = 1:2)
aggregated_embeddings
embeddings_from_huggingface2$context
embeddings_from_huggingface2
usethis::use_data(embeddings_from_huggingface2)
embeddings_from_huggingface2
devtools::document()
#skip_on_cran()
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2$context, layers = 1:2)
aggregated_embeddings
expect_true(tibble::is_tibble(aggregated_embeddings))
expect_true(tibble::is_tibble(aggregated_embeddings$harmonywords))
aggregated_embeddings$harmonywords[1]
expect_is(aggregated_embeddings$harmonywords[1], 'integer')
expect_is(aggregated_embeddings$harmonywords[1][1], 'integer')
expect_is(aggregated_embeddings$harmonywords[1][1], 'numeric')
aggregated_embeddings$harmonywords[1][1]
expect_is(aggregated_embeddings$harmonywords[[1]][1], 'numeric')
#skip_on_cran()
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2$context, layers = 1:2)
expect_is(aggregated_embeddings$harmonywords[[1]][1], 'numeric')
expect_true(tibble::is_tibble(aggregated_embeddings$harmonywords))
#skip_on_cran()
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2$context, layers = 'all')
expect_is(aggregated_embeddings$harmonywords[[1]][1], 'numeric')
expect_true(tibble::is_tibble(aggregated_embeddings$harmonywords))
#Data
wordembeddings <- wordembeddings4_10
data <- Language_based_assessment_data_8_10
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:3],
data$swlstotal[1:3],
split = "quartile",
Npermutations = 2,
n_per_split = 1,
pca = 2)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:3],
data$swlstotal[1:3],
split = "quartile",
Npermutations = 2,
n_per_split = 1,
pca = NULL)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:3],
data$swlstotal[1:3],
split = "quartile",
Npermutations = 2,
n_per_split = 1,
pca = 0.9)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:5],
data$swlstotal[1:5],
split = "quartile",
Npermutations = 2,
n_per_split = 1,
pca = 0.9)
#Data
wordembeddings <- wordembeddings4_10
data <- Language_based_assessment_data_8_10
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:5],
data$swlstotal[1:5],
split = "quartile",
Npermutations = 2,
n_per_split = 1,
pca = 0.9)
data$harmonywords[1:5]
data$harmonywords
wordembeddings$harmonywords
wordembeddings$harmonywords[1:5,]
wordembeddings$singlewords_we
data$hilstotal[1:5]
data$swlstotal[1:5]
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:5],
data$swlstotal[1:5],
split = "quartile",
Npermutations = 2,
n_per_split = 1,
pca = 0.9)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:5],
data$swlstotal[1:5],
split = "quartile",
Npermutations = 2,
n_per_split = 1,
pca = NULL)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:3],
wordembeddings$harmonywords[1:3,],
wordembeddings$singlewords_we,
data$hilstotal[1:3],
split = "median",
Npermutations = 2,
n_per_split = 1)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:5],
split = "median",
Npermutations = 2,
n_per_split = 1)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:5],
split = "median",
Npermutations = 2,
n_per_split = 1,
pca=2)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:5],
split = "median",
Npermutations = 2,
n_per_split = 1,
pca=2)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:5],
data$swlstotal[1:5],
split = "quartile",
Npermutations = 2,
n_per_split = 1)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:5],
data$swlstotal[1:5],
split = "quartile",
Npermutations = 2,
n_per_split = 0.9)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:5],
data$swlstotal[1:5],
split = "quartile",
Npermutations = 2,
n_per_split = 0.9)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:5],
wordembeddings$harmonywords[1:5,],
wordembeddings$singlewords_we,
data$hilstotal[1:5],
data$swlstotal[1:5],
split = "quartile",
Npermutations = 2,
n_per_split = 3)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:10],
wordembeddings$harmonywords[1:10,],
wordembeddings$singlewords_we,
data$hilstotal[1:10],
data$swlstotal[1:10],
split = "quartile",
Npermutations = 2,
n_per_split = 3)
# Pre-processing data for plotting
df_for_plotting <- textProjectionData(data$harmonywords[1:10],
wordembeddings$harmonywords[1:10,],
wordembeddings$singlewords_we,
data$hilstotal[1:10],
data$swlstotal[1:10],
split = "quartile",
Npermutations = 2,
n_per_split = 3,
pca = 0.9)
#skip_on_cran()
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2$context, layers = 1:2)
aggregated_embeddings
expect_is(aggregated_embeddings$harmonywords[[1]][1], 'numeric')
expect_true(tibble::is_tibble(aggregated_embeddings$harmonywords))
#skip_on_cran()
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2$context, layers = 'all')
aggregated_embeddings
#skip_on_cran()
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2, layers = 'all')
embeddings_from_huggingface2
#skip_on_cran()
aggregated_embeddings <-  textLayerAggregation(embeddings_from_huggingface2$context$harmonywords, layers = 'all')
embeddings_from_huggingface2$context
# helper function to skip tests if we don't have the 'foo' module
skip_if_no_transformers <- function() {
have_transformers <- reticulate::py_module_available("transformers")
if (!have_transformers)
skip("transformers not available for testing")
}
# helper function to skip tests if we don't have the 'foo' module
skip_if_no_transformers <- function() {
have_transformers <- reticulate::py_module_available("transformers")
if (!have_transformers)
skip("transformers not available for testing")
}
skip_if_no_torch <- function() {
have_torch <- reticulate::py_module_available("torch")
if (!have_torch)
skip("torch not available for testing")
}
#x <- Language_based_assessment_data_8_10[1:2, 1:2]
text_to_test_import1 <- c("Let's test this", "hope it works")
text_to_test_import2 <- c("I'm happy", "Let's go")
x <- tibble::tibble(text_to_test_import1, text_to_test_import2)
embeddings <- textEmbed(x)
expect_that(embeddings, is_a("list"))
#x <- Language_based_assessment_data_8_10[1:2, 1:2]
text_to_test_import1 <- c("test this", "hope it works")
text_to_test_import2 <- c("I am happy", "Let us go")
x <- tibble::tibble(text_to_test_import1, text_to_test_import2)
embeddings <- textEmbed(x)
embeddings <- textHuggingFace(x)
expect_that(embeddings, is_a("list"))
embeddings <- textHuggingFace(x, contexts=TRUE, decontexts = FALSE)
library(text)
library(text)
f1_from_python()
#  devtools::document()
#' Testing F1 function sourced from python
#' @return "f one"
#' @export
f1_sourced_from_python <- function() {
reticulate::source_python(system.file("python", "the_py_module.py", package = "text", mustWork = TRUE))
f1()
}
f1_sourced_from_python
f1_sourced_from_python()
#x <- Language_based_assessment_data_8_10[1:2, 1:2]
output <- f1_sourced_from_python()
output
expect_that(output, is_a("character"))
library(text)
install.packages("testthat")
install.packages("testthat")
library(text)
library(reticulate)
#reticulate::source_python(system.file("python", "huggingface_Interface3.py", package = "text", mustWork = TRUE))
sessionInfo()
library(testthat)
#reticulate::source_python(system.file("python", "huggingface_Interface3.py", package = "text", mustWork = TRUE))
sessionInfo()
#  devtools::document()
#' Testing F1 function sourced from python
#' @return "f one"
#' @export
f1_sourced_from_python <- function() {
reticulate::source_python(system.file("python", "the_py_module.py", package = "text", mustWork = TRUE))
f1()
}
f1_sourced_from_python()
library(text)
.rs.RestartR
.rs.restartR
.rs.restartR()
.rs.restartR()
sessionInfo()
sessionInfo()
source('~/Desktop/1 Projects/0 Research/0 text r-package/text/tests/testthat/test-1-textEmbed.R', echo=TRUE)
pkgdown::build_home(pkg = ".", override = list(), preview = NA, quiet = TRUE)
########################
###### BUILDING WEBSITE
########################
# Run to build the website
pkgdown::build_site()
.rs.restartR()
trained <- textTrain(wordembeddings4_10$harmonytext,
Language_based_assessment_data_8_10$hilstotal,
outside_strata_y = NULL,
inside_strata_y = NULL,
penalty = c(1),
mixture = c(0),
multi_cores = TRUE
)
library(text)
trained <- textTrain(wordembeddings4_10$harmonytext,
Language_based_assessment_data_8_10$hilstotal,
outside_strata_y = NULL,
inside_strata_y = NULL,
penalty = c(1),
mixture = c(0),
multi_cores = TRUE
)
help(multisession)
devtools::document()
